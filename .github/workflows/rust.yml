name: RustCI

on:
  pull_request:
  push:
    branches:
      - master

env:
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable,           os: ubuntu-latest }
          - { rust: beta,             os: ubuntu-latest }
          - { rust: nightly,          os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - run: sudo apt-get install libpcap-dev
      - run: cargo test --verbose --workspace
      - run: cargo test --verbose --workspace --all-features
      - run: cargo test --verbose --workspace --no-default-features

  # Clippy, rustfmt, cargo-spellcheck
  lints:
    name: Verify Code Formatting and Lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: clippy, rustfmt
      - run: cargo install cargo-spellcheck
      - run: cargo clippy --workspace --all-targets --verbose
      - run: cargo clippy --workspace --all-targets --verbose --no-default-features
      - run: cargo clippy --workspace --all-targets --verbose --all-features
      - run: cargo fmt --all -- --check
      - run: cargo spellcheck -m 255 #Fail the CI if there are spelling mistakes

  # cargo-audit (looks for CVEs in dependencies), cargo-crev (Security reports and trust circles for crates), cargo-outdated (checks for out of date crates)
  security:
    name: Verify Crate and Dependency Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: cargo install cargo-crev
      - run: cargo install cargo-outdated
      - run: cargo outdated
      - run: cargo crev crate verify --show-all
      
  # cargo-geiger (Checks for unsafe), rustig (Checks for panic! paths)
  reliability: 
    name: Check Crate and Dependency Reliability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      - run: sudo apt-get install libssl-dev
      - run: echo workingdir $(pwd)
      - run: cargo install cargo-geiger --git https://github.com/rust-secure-code/cargo-geiger.git --features vendored-openssl
      - run: cargo install rustig --git https://github.com/Technolution/rustig.git
      - run: cargo build
      - run: rustig --binary target/debug/ecli --full-crate-analysis --verbose
      - run: cd ecli
      - run: cargo geiger
      - run: cd ../eframework
      - run: cargo geiger
      - run: cd ../pcap_parser
      - run: cargo geiger